"""
Django settings for LaLouge project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

from datetime import timedelta

import os, environ, socket

from django.utils import timezone


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


env = environ.Env()

# Reading .env file
env_file = os.path.join(BASE_DIR, '.env')
env.read_env(env_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# Raises django's Improperly Configured exception if
# SECRET_KEY not in os.environ
SECRET_KEY = env('SECRET_KEY')


# Checking If Project Is Running On LocalHost
def is_localhost(ip_address):
    try:
        localhost_ips = [ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if ':' not in ip]
        return ip_address in localhost_ips
    except socket.gaierror:
        return False

# Based On Whether The Project Is Running On LocalHost, Set DEBUG To The Returned Value
# For LocalHosts, DEBUG = True else DEBUG = False
# For Security Purpose, Never Run The Project On Production When DEBUG = True
DEBUG = is_localhost(socket.gethostbyname(socket.gethostname()))

# Setting ALLOWED_HOSTS Based On Whether It's A Local Or Production Environment
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '::1'] if DEBUG else ['lalouge-6e539a53aeb4.herokuapp.com']

print("ALLOWED HOST IS: ", ALLOWED_HOSTS)
# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Apps installed using `pip3 install <package>`
INSTALLED_APPS = [
    'rest_framework',
    'rest_framework_simplejwt',
    # 'rest_framework_simplejwt.token_blacklist',
    'django_filters',
    'django_celery_beat',
    'django_celery_results',
    'corsheaders',
    'daphne',
]

# Apps created using `django-admin startapp <app_name>` command
START_APPS = [
    'accounts.apps.AccountsConfig',
    'utilities.apps.UtilitiesConfig',
    'admin_management.apps.AdminManagementConfig',
]

INSTALLED_APPS += DJANGO_APPS + START_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'utilities.middleware.DeviceMetaInfoMiddleware',
    'utilities.middleware.CheckUnmatchedURLMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LaLouge.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'LaLouge.wsgi.application'
ASGI_APPLICATION = 'LaLouge.asgi.application'

if DEBUG:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer",
        },
    }

    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": ["redis://localhost:6379"]
        }
    }

    CELERY_BROKER_URL = "redis://localhost:6379/0"
    CELERY_RESULT_BACKEND = "redis://localhost:6379/0"

else:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [os.environ.get("REDIS_URL")],
            },
        },
    }

    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": [os.environ.get("REDIS_URL")]
        }
    }

    CELERY_BROKER_URL = os.environ.get("REDIS_URL")
    CELERY_RESULT_BACKEND = os.environ.get("REDIS_URL")


# REST_FRAMEWORK = {
#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
#     'PAGE_SIZE': 1
# }

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


# Simple JWT Configuration settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=28),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(days=7),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=28),
}


# Device Auth Token Configuration
DEVICE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=28),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=84),

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": SECRET_KEY,

    "AUTH_HEADER_TYPE": ("Bearer",),
    "DEVICE_ID_FIELD": "query_id",

    "TOKEN_BLACKLIST": True,
    "ACCESS_TOKEN_REFRESH": True,
}


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# Setting Language To British English (en-gb = English - Great Britain)
# To Set It Back To American English, Set LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'en-gb'

# Setting Timezone To GMT+1 Instead of UTC
TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Celery Configuration
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_EXTENDED = True


# User model / to determine the model used for authentication
AUTH_USER_MODEL = 'accounts.User'

# Set the email backend to use the SMTP backend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Set the Gmail SMTP server address and port
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = os.environ.get('EMAIL_PORT')

# Use TLS encryption for security
EMAIL_USE_TLS = True

# Replace with your Gmail email address and password or app password if you have 2-step verification enabled
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

# Enforce SSL connection by redirecting all non-SSL requests to SSL
# SECURE_SSL_REDIRECT = True

# # Set the HTTP Strict-Transport-Security header to require SSL for one year
# SECURE_HSTS_SECONDS = 31536000  # one year

# # Include all subdomains in the HSTS policy
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True

# SMS SETTINGS
SMS_USER = os.environ.get("SMS_USER")
SMS_PASSWORD = os.environ.get("SMS_PASSWORD")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

APPLICATION_SETTINGS = {
    "CMD_SECRET_KEY": os.environ.get('CMD_SECRET_KEY', None),
    # `INACTIVITY_LIMIT` Sets The Default Limit For Inactivity Such As Account Inactivity,
    # Or Any Inactivity Recorded.
    "INACTIVITY_LIMIT": timedelta(days=28)
}

from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    "delete_unverified_accounts": {
        "task": "utilities.tasks.clean_up_unverified_accounts",
        "schedule": 1209600, # Exactly 14 days in seconds (3600s = 1hour, 3600s * 24hours = 1day, 14days = 1209600seconds)
    },
}