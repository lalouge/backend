# This module defines custom throttling classes for the API
# Throttling is used to limit the number of requests that can be made to the API within a certain period of time.
# This helps to prevent abuse and ensure fair use of the API.

# Do not edit this file if you have just little or no idea about throttling
# To learn more about django-rest-framework throttles, visit this link ðŸ‘‡ðŸ‘‡ðŸ‘‡
# https://www.django-rest-framework.org/api-guide/throttling/

from rest_framework.throttling import UserRateThrottle
from rest_framework.views import exception_handler
from rest_framework.exceptions import Throttled


class AnonRateThrottle(UserRateThrottle):
    """
    Throttles the number of anonymous requests to 1000 per day.
    The throttle scope is based on the client IP address.
    This means that each IP address can only make 1000 requests per day.
    """
    rate = '10/day'
    scope_attr = 'client_ip'


class UserLoginThrottle(UserRateThrottle):
    """
    Throttles the number of login requests to 8 per user per day.
    The throttle scope is based on the users query_id field.
    This means that each user can only make 10 login requests per day.
    """
    rate = '8/day'
    scope_attr = 'user.query_id'


def custom_throttle_exception_handler(exc, context):
    # Call REST framework's default exception handler first,
    # to get the standard error response.
    response = exception_handler(exc, context)

    if isinstance(exc, Throttled): # check that a Throttled exception is raised
        custom_response_data = { # prepare custom response data
            'message': 'request limit exceeded',
            'availableIn': '%d day(s)'%exc.wait/86400,
            'details': 'request limit exceeded. try again in'
        }
        response.data = custom_response_data # set the custom response data on response object

    return response